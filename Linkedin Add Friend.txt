let currentPage = 1;
let criticalErrors = 0;
const maxCriticalErrors = 10;
const minDelay = 3000;
const maxDelay = 6000;
const maxNextRetries = 5;
let nextRetries = 0;
let scrollAttempts = 0;

// Random delay to mimic human behavior
function randomDelay() {
  return Math.floor(Math.random() * (maxDelay - minDelay + 1)) + minDelay;
}

// Check if element is visible
function isVisible(el) {
  const rect = el.getBoundingClientRect();
  return rect.width > 0 && rect.height > 0;
}

// Smooth auto-scroll to load more profiles
function autoScroll(callback) {
  const scrollHeight = document.body.scrollHeight;
  window.scrollTo({ top: scrollHeight, behavior: 'smooth' });
  scrollAttempts++;
  console.log(`üìú Scroll attempt ${scrollAttempts}`);
  setTimeout(() => {
    if (scrollAttempts < 3) {
      autoScroll(callback);
    } else {
      scrollAttempts = 0;
      callback();
    }
  }, 2000);
}

// Start the connection process
function startConnectionProcess() {
  autoScroll(() => {
    const connectButtons = Array.from(document.querySelectorAll('button'))
      .filter(btn =>
        btn.innerText.trim().toLowerCase().includes('connect') &&
        !btn.disabled &&
        isVisible(btn)
      );

    if (connectButtons.length > 0) {
      console.log(`üîç Found ${connectButtons.length} connect buttons on Page ${currentPage}`);
      clickConnectButtonsSequentially(connectButtons);
    } else {
      console.warn(`‚ö†Ô∏è No connect buttons found on Page ${currentPage}`);
      goToNextPage();
    }
  });
}

// Click connect buttons one-by-one
function clickConnectButtonsSequentially(buttons, index = 0) {
  if (index >= buttons.length) {
    console.log("‚úÖ All connect buttons processed.");
    goToNextPage();
    return;
  }

  const connectBtn = buttons[index];

  if (!connectBtn || connectBtn.disabled || !isVisible(connectBtn)) {
    console.log(`‚è≠Ô∏è Skipping button #${index + 1} ‚Äî not usable`);
    setTimeout(() => clickConnectButtonsSequentially(buttons, index + 1), randomDelay());
    return;
  }

  try {
    console.log(`üîó Clicking Connect #${index + 1}`);
    connectBtn.click();

    setTimeout(() => {
      handleModalOrDirectConnect(index, 0, buttons);
    }, randomDelay());

  } catch (error) {
    console.error(`‚ùå Critical error clicking connect #${index + 1}:`, error);
    criticalErrors++;
    checkCriticalErrorLimit();
    setTimeout(() => clickConnectButtonsSequentially(buttons, index + 1), randomDelay());
  }
}

// Handle modal or direct connect
function handleModalOrDirectConnect(index, attempt = 0, buttons) {
  const modal = document.querySelector('.artdeco-modal');
  const sendButton = modal
    ? Array.from(modal.querySelectorAll('button')).find(btn =>
        btn.innerText.trim().toLowerCase().includes('send') &&
        !btn.disabled &&
        isVisible(btn)
      )
    : null;

  if (sendButton) {
    console.log(`üì§ Clicking 'Send' for #${index + 1}`);
    sendButton.click();
    setTimeout(() => clickConnectButtonsSequentially(buttons, index + 1), randomDelay());
  } else if (!modal) {
    console.log(`‚úÖ No modal ‚Äî assuming direct connect for #${index + 1}`);
    setTimeout(() => clickConnectButtonsSequentially(buttons, index + 1), randomDelay());
  } else if (attempt < 5) {
    setTimeout(() => handleModalOrDirectConnect(index, attempt + 1, buttons), 700);
  } else {
    console.warn(`‚è≠Ô∏è 'Send' button not found for #${index + 1} ‚Äî skipping`);
    setTimeout(() => clickConnectButtonsSequentially(buttons, index + 1), randomDelay());
  }
}

// Go to next page
function goToNextPage() {
  const nextButton = Array.from(document.querySelectorAll('button, span, a'))
    .find(el =>
      el.innerText.trim().toLowerCase().includes('next') &&
      !el.disabled &&
      isVisible(el)
    );

  if (nextButton) {
    currentPage++;
    nextRetries = 0;
    console.log(`‚û°Ô∏è Moving to Page ${currentPage}`);
    nextButton.click();
    setTimeout(() => {
      if (document.readyState === 'complete') {
        startConnectionProcess();
      } else {
        setTimeout(startConnectionProcess, 2500);
      }
    }, randomDelay());
  } else if (nextRetries < maxNextRetries) {
    console.warn(`üîÑ 'Next' button not found. Retrying... (${nextRetries + 1})`);
    nextRetries++;
    setTimeout(goToNextPage, randomDelay());
  } else {
    console.error("üõë Max retries reached for next page. Stopping.");
    alert("Script stopped: 'Next' button not found after multiple attempts.");
  }
}

// Only count critical errors
function checkCriticalErrorLimit() {
  if (criticalErrors >= maxCriticalErrors) {
    console.error(`‚ùå ${criticalErrors} critical errors occurred. Terminating.`);
    alert("Script terminated due to repeated critical failures.");
    throw new Error("Too many critical errors.");
  }
}

// üöÄ Launch the script
try {
  startConnectionProcess();
} catch (err) {
  console.error("üö® Fatal error during automation:", err);
}
